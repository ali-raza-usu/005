package aspects.encyption;

import joinpoints.communication.SendEventJP;
import utilities.Encoder;
import utilities.IMessage;
import utilities.Message;
import baseaspects.communication.OneWaySendAspect;


public aspect EncryptionAspect extends OneWaySendAspect
{
	//private Logger logger = Logger.getLogger(OneWaySendAspect.class);
	private Logger logger = Logger.getLogger(LoggingTimeAspectOWS.class);			

	before(SendEventJP _sendEventJp): ConversationBegin(_sendEventJp){
		
		/*String sendTime = getCurrentTime();
     	Message msg =  (Message)Encoder.decode(_sendEventJp.getBytes());
     	String logString = "OneWaySend: Sender: "+getTargetClass() + " - Message "+ msg.getClass().getSimpleName() + " [ID = " +_sendEventJp.getConversation().getId().toString()+"] at time "+ sendTime;
		logger.debug(logString);		
		System.out.println(logString);
     	return proceed(_sendEventJp);*/
	}

	//public pointcut translationMessage(String data1, String data2) : call(public java.util.UUID.TranslationMessage(data1, data2)) && args( data, data2);
	
	//public pointcut encodingpc(IMessage _data) : call(public static byte[]  utilities.Encoder.encode(..)) && args(_data); 
	
	// I can use the translationMessage to encrypt the message
	
	/*before(IMessage _data) : encodingpc(_data)
	{
		
	}*/
	
	/*before(SendEventJP _sendJp): MessageSend(_sendJp)
	{
		
	}*/
	


}
